name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:  
  lint:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu для выполнения задачи
    steps:
      - name: Checkout code  # Извлекаем код из репозитория
        uses: actions/checkout@v3  # Используем готовое действие для извлечения кода

      - name: Set up Python  # Устанавливаем окружение Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Указываем версию Python

      - name: Install dependencies  # Устанавливаем зависимости
        run: |
          python -m pip install --upgrade pip  # Обновляем pip
          pip install flake8  # Устанавливаем flake8 для линтинга

      - name: Run flake8  # Запускаем линтер flake8
        run: flake8 .  # Применяем линтинг ко всему коду в текущей директории


  test:  
    runs-on: ubuntu-latest  
    steps: 
      - name: извлечение кода
        uses: actions/checkout@v2

      - name: установка питона
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'  

      - name: установка зависимостей для тестов
        run: |
          python -m pip install --upgrade pip  
          pip install coverage  # Установка библиотеки для измерения покрытия

      - name: запуск юнит тестов
        run: |
          coverage run -m unittest discover -s . -p '*_test.py' 

      - name: измерение покрытия тестами
        run: coverage report  

  security:  
    runs-on: ubuntu-latest  
    steps:  
      - name: извлечение кода
        uses: actions/checkout@v2

      - name: установка питона
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'  

      - name: установка зависимостей для проверки безопасности
        run: |
          python -m pip install --upgrade pip  
          pip install bandit  

      - name: запуск проверки безопасности кода
        run: bandit -r .  

  notify:
    runs-on: ubuntu-latest  
    if: always()  
    steps:
      - name: уведомление тг  
        run: |
          MESSAGE="Условие почему-то не работает"
          if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
            MESSAGE="Пайплайн ${{ github.workflow }} завершен успешно!"
          else
            MESSAGE="Пайплайн ${{ github.workflow }} завершен с ошибкой!"  
          fi

          if [ -n "$MESSAGE" ]; then  # Проверка, что переменная MESSAGE не пустая
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text="$MESSAGE" \ #https://api.telegram.org/bot(API Token)/sendMessage?chat_id={{telegram_id}}&text=
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \  # Отправка данных в теле HTTP-запроса
            -d text="$MESSAGE"  # Отправка сообщения с результатом в Telegram
          else
            echo "Сообщение пустое, отправка отменена."  
          fi

